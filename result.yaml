apiVersion: v1
data:
  AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES: "true"
  CACHE_LOCAL_ENABLED: "false"
  CACHE_REDIS_ENABLED: "true"
  CACHE_REDIS_PREFIX_KEY: evolution
  CACHE_REDIS_SAVE_INSTANCES: "false"
  CACHE_REDIS_TTL: "604800"
  CHATWOOT_BOT_CONTACT: "true"
  CHATWOOT_ENABLED: "false"
  CHATWOOT_IMPORT_PLACEHOLDER_MEDIA_MESSAGE: "true"
  CHATWOOT_MESSAGE_DELETE: "true"
  CHATWOOT_MESSAGE_READ: "true"
  CONFIG_SESSION_PHONE_CLIENT: Evolution API
  CONFIG_SESSION_PHONE_NAME: Chrome
  CONFIG_SESSION_PHONE_VERSION: 2.3000.1015901307
  CORS_CREDENTIALS: "true"
  CORS_METHODS: GET,POST,PUT,DELETE
  CORS_ORIGIN: '*'
  DATABASE_CONNECTION_CLIENT_NAME: evolution_exchange
  DATABASE_DELETE_MESSAGE: "true"
  DATABASE_PROVIDER: postgresql
  DATABASE_SAVE_DATA_CHATS: "true"
  DATABASE_SAVE_DATA_CONTACTS: "true"
  DATABASE_SAVE_DATA_HISTORIC: "true"
  DATABASE_SAVE_DATA_INSTANCE: "true"
  DATABASE_SAVE_DATA_LABELS: "true"
  DATABASE_SAVE_DATA_NEW_MESSAGE: "true"
  DATABASE_SAVE_IS_ON_WHATSAPP: "true"
  DATABASE_SAVE_IS_ON_WHATSAPP_DAYS: "7"
  DATABASE_SAVE_MESSAGE_UPDATE: "true"
  DEL_INSTANCE: "false"
  DIFY_ENABLED: "false"
  EVENT_EMITTER_MAX_LISTENERS: "50"
  LANGUAGE: en
  LOG_BAILEYS: error
  LOG_COLOR: "true"
  LOG_LEVEL: ERROR,WARN,DEBUG,INFO,LOG,VERBOSE,DARK,WEBHOOKS,WEBSOCKET
  N8N_ENABLED: "true"
  N8N_URL: http://n8n:5678
  N8N_WEBHOOK_URL: http://192.168.15.6:5678/
  OPENAI_ENABLED: "false"
  PUSHER_ENABLED: "false"
  PUSHER_EVENTS_APPLICATION_STARTUP: "true"
  PUSHER_EVENTS_CALL: "true"
  PUSHER_EVENTS_CHATS_DELETE: "true"
  PUSHER_EVENTS_CHATS_SET: "true"
  PUSHER_EVENTS_CHATS_UPDATE: "true"
  PUSHER_EVENTS_CHATS_UPSERT: "true"
  PUSHER_EVENTS_CONNECTION_UPDATE: "true"
  PUSHER_EVENTS_CONTACTS_SET: "true"
  PUSHER_EVENTS_CONTACTS_UPDATE: "true"
  PUSHER_EVENTS_CONTACTS_UPSERT: "true"
  PUSHER_EVENTS_GROUP_PARTICIPANTS_UPDATE: "true"
  PUSHER_EVENTS_GROUPS_UPDATE: "true"
  PUSHER_EVENTS_GROUPS_UPSERT: "true"
  PUSHER_EVENTS_LABELS_ASSOCIATION: "true"
  PUSHER_EVENTS_LABELS_EDIT: "true"
  PUSHER_EVENTS_MESSAGES_DELETE: "true"
  PUSHER_EVENTS_MESSAGES_EDITED: "true"
  PUSHER_EVENTS_MESSAGES_SET: "true"
  PUSHER_EVENTS_MESSAGES_UPDATE: "true"
  PUSHER_EVENTS_MESSAGES_UPSERT: "true"
  PUSHER_EVENTS_PRESENCE_UPDATE: "true"
  PUSHER_EVENTS_QRCODE_UPDATED: "true"
  PUSHER_EVENTS_SEND_MESSAGE: "true"
  PUSHER_EVENTS_TYPEBOT_CHANGE_STATUS: "false"
  PUSHER_EVENTS_TYPEBOT_START: "false"
  PUSHER_GLOBAL_APP_ID: ""
  PUSHER_GLOBAL_CLUSTER: ""
  PUSHER_GLOBAL_ENABLED: "false"
  PUSHER_GLOBAL_KEY: ""
  PUSHER_GLOBAL_SECRET: ""
  PUSHER_GLOBAL_USE_TLS: "true"
  QRCODE_COLOR: '#175197'
  QRCODE_LIMIT: "30"
  RABBITMQ_ENABLED: "false"
  RABBITMQ_EVENTS_APPLICATION_STARTUP: "false"
  RABBITMQ_EVENTS_CALL: "false"
  RABBITMQ_EVENTS_CHATS_DELETE: "false"
  RABBITMQ_EVENTS_CHATS_SET: "false"
  RABBITMQ_EVENTS_CHATS_UPDATE: "false"
  RABBITMQ_EVENTS_CHATS_UPSERT: "false"
  RABBITMQ_EVENTS_CONNECTION_UPDATE: "false"
  RABBITMQ_EVENTS_CONTACTS_SET: "false"
  RABBITMQ_EVENTS_CONTACTS_UPDATE: "false"
  RABBITMQ_EVENTS_CONTACTS_UPSERT: "false"
  RABBITMQ_EVENTS_GROUP_PARTICIPANTS_UPDATE: "false"
  RABBITMQ_EVENTS_GROUP_UPDATE: "false"
  RABBITMQ_EVENTS_GROUPS_UPSERT: "false"
  RABBITMQ_EVENTS_INSTANCE_CREATE: "false"
  RABBITMQ_EVENTS_INSTANCE_DELETE: "false"
  RABBITMQ_EVENTS_LOGOUT_INSTANCE: "false"
  RABBITMQ_EVENTS_MESSAGES_DELETE: "false"
  RABBITMQ_EVENTS_MESSAGES_EDITED: "false"
  RABBITMQ_EVENTS_MESSAGES_SET: "false"
  RABBITMQ_EVENTS_MESSAGES_UPDATE: "false"
  RABBITMQ_EVENTS_MESSAGES_UPSERT: "false"
  RABBITMQ_EVENTS_PRESENCE_UPDATE: "false"
  RABBITMQ_EVENTS_QRCODE_UPDATED: "false"
  RABBITMQ_EVENTS_REMOVE_INSTANCE: "false"
  RABBITMQ_EVENTS_SEND_MESSAGE: "false"
  RABBITMQ_EVENTS_TYPEBOT_CHANGE_STATUS: "false"
  RABBITMQ_EVENTS_TYPEBOT_START: "false"
  RABBITMQ_EXCHANGE_NAME: evolution
  RABBITMQ_GLOBAL_ENABLED: "false"
  RABBITMQ_PREFIX_KEY: evolution
  RABBITMQ_URI: amqp://localhost
  S3_ACCESS_KEY: ""
  S3_BUCKET: evolution
  S3_ENABLED: "false"
  S3_ENDPOINT: s3.domain.com
  S3_PORT: "443"
  S3_REGION: eu-west-3
  S3_SECRET_KEY: ""
  S3_USE_SSL: "true"
  SENTRY_DSN: ""
  SERVER_PORT: "8080"
  SERVER_TYPE: http
  SERVER_URL: http://192.168.15.6:8080
  SQS_ACCESS_KEY_ID: ""
  SQS_ACCOUNT_ID: ""
  SQS_ENABLED: "false"
  SQS_REGION: ""
  SQS_SECRET_ACCESS_KEY: ""
  TYPEBOT_API_VERSION: latest
  TYPEBOT_ENABLED: "false"
  WA_BUSINESS_LANGUAGE: en_US
  WA_BUSINESS_TOKEN_WEBHOOK: evolution
  WA_BUSINESS_URL: https://graph.facebook.com
  WA_BUSINESS_VERSION: v20.0
  WEBHOOK_EVENTS_APPLICATION_STARTUP: "false"
  WEBHOOK_EVENTS_CALL: "true"
  WEBHOOK_EVENTS_CHATS_DELETE: "true"
  WEBHOOK_EVENTS_CHATS_SET: "true"
  WEBHOOK_EVENTS_CHATS_UPDATE: "true"
  WEBHOOK_EVENTS_CHATS_UPSERT: "true"
  WEBHOOK_EVENTS_CONNECTION_UPDATE: "true"
  WEBHOOK_EVENTS_CONTACTS_SET: "true"
  WEBHOOK_EVENTS_CONTACTS_UPDATE: "true"
  WEBHOOK_EVENTS_CONTACTS_UPSERT: "true"
  WEBHOOK_EVENTS_ERRORS: "false"
  WEBHOOK_EVENTS_ERRORS_WEBHOOK: ""
  WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE: "true"
  WEBHOOK_EVENTS_GROUPS_UPDATE: "true"
  WEBHOOK_EVENTS_GROUPS_UPSERT: "true"
  WEBHOOK_EVENTS_LABELS_ASSOCIATION: "true"
  WEBHOOK_EVENTS_LABELS_EDIT: "true"
  WEBHOOK_EVENTS_LOGOUT_INSTANCE: "false"
  WEBHOOK_EVENTS_MESSAGES_DELETE: "true"
  WEBHOOK_EVENTS_MESSAGES_EDITED: "true"
  WEBHOOK_EVENTS_MESSAGES_SET: "true"
  WEBHOOK_EVENTS_MESSAGES_UPDATE: "true"
  WEBHOOK_EVENTS_MESSAGES_UPSERT: "true"
  WEBHOOK_EVENTS_PRESENCE_UPDATE: "true"
  WEBHOOK_EVENTS_QRCODE_UPDATED: "true"
  WEBHOOK_EVENTS_REMOVE_INSTANCE: "false"
  WEBHOOK_EVENTS_SEND_MESSAGE: "true"
  WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS: "false"
  WEBHOOK_EVENTS_TYPEBOT_START: "false"
  WEBHOOK_GLOBAL_ENABLED: "false"
  WEBHOOK_GLOBAL_URL: ""
  WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS: "false"
  WEBSOCKET_ENABLED: "false"
  WEBSOCKET_GLOBAL_EVENTS: "false"
kind: ConfigMap
metadata:
  name: dev-evolution-config
  namespace: dev
---
apiVersion: v1
data:
  DB_POSTGRESDB_DATABASE: n8n
  DB_POSTGRESDB_PORT: "5432"
  DB_TYPE: postgres
  GENERIC_TIMEZONE: America/Sao_Paulo
  N8N_EDITOR_BASE_URL: http://192.168.15.6:5678
  N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
  N8N_HOST: 0.0.0.0
  N8N_PROTOCOL: http
  N8N_SECURE_COOKIE: "false"
  WEBHOOK_URL: http://n8n:5678/
kind: ConfigMap
metadata:
  name: dev-n8n-config
  namespace: dev
---
apiVersion: v1
data:
  POSTGRES_HOST_AUTH_METHOD: trust
kind: ConfigMap
metadata:
  name: dev-postgres-config
  namespace: dev
---
apiVersion: v1
data:
  AUTHENTICATION_API_KEY: dGVzdGU=
  CACHE_REDIS_URI: cmVkaXM6Ly9kZXYtcmVkaXM6NjM3OS82
  DATABASE_CONNECTION_URI: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0BkZXYtcG9zdGdyZXM6NTQzMi9wb3N0Z3Jlcz9zY2hlbWE9cHVibGlj
  DATABASE_URL: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0BkZXYtcG9zdGdyZXM6NTQzMi9wb3N0Z3Jlcz9zY2hlbWE9cHVibGlj
kind: Secret
metadata:
  name: dev-evolution-secret
  namespace: dev
type: Opaque
---
apiVersion: v1
data:
  DB_POSTGRESDB_HOST: ZGV2LXBvc3RncmVz
  DB_POSTGRESDB_PASSWORD: cGFzcw==
  DB_POSTGRESDB_USER: dXNlcg==
kind: Secret
metadata:
  name: dev-n8n-secret
  namespace: dev
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: dev-postgres-secret
  namespace: dev
stringData:
  POSTGRES_PASSWORD: pass
  POSTGRES_USER: user
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: dev-default-backend
  namespace: dev
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.35.0 (HEAD)
  labels:
    app: evolution
  name: dev-evolution
  namespace: dev
spec:
  ports:
  - name: evolution
    port: 8080
    targetPort: 8080
  selector:
    app: evolution
---
apiVersion: v1
kind: Service
metadata:
  name: dev-ingress-nginx-controller
  namespace: dev
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: ingress-nginx
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.35.0 (HEAD)
  labels:
    app: n8n
  name: dev-n8n
  namespace: dev
spec:
  ports:
  - name: n8n
    nodePort: 30678
    port: 5678
    targetPort: 5678
  selector:
    app: n8n
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.35.0 (HEAD)
  labels:
    app: postgres
  name: dev-postgres
  namespace: dev
spec:
  ports:
  - name: postgres
    nodePort: 30432
    port: 5432
    targetPort: 5432
  selector:
    app: postgres
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.35.0 (HEAD)
  labels:
    app: redis
  name: dev-redis
  namespace: dev
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  selector:
    app: redis
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: evolution-claim0
  name: dev-evolution-claim0
  namespace: dev
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: n8n-claim0
  name: dev-n8n-claim0
  namespace: dev
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: postgres-claim0
  name: dev-postgres-claim0
  namespace: dev
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: redis-claim0
  name: dev-redis-claim0
  namespace: dev
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-default-backend
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx:stable
        name: nginx
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.35.0 (HEAD)
  labels:
    app: evolution
  name: dev-evolution
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: evolution
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.35.0 (HEAD)
      labels:
        app: evolution
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: dev-evolution-config
        - secretRef:
            name: dev-evolution-secret
        image: atendai/evolution-api
        name: evolution-api
        volumeMounts:
        - mountPath: /evolution/instances
          name: evolution-claim0
      restartPolicy: Always
      volumes:
      - name: evolution-claim0
        persistentVolumeClaim:
          claimName: dev-evolution-claim0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.35.0 (HEAD)
  labels:
    app: n8n
  name: dev-n8n
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: n8n
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.35.0 (HEAD)
      labels:
        app: n8n
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: dev-n8n-config
        - secretRef:
            name: dev-n8n-secret
        image: n8nio/n8n:latest
        name: n8n
        ports:
        - containerPort: 5678
          protocol: TCP
        volumeMounts:
        - mountPath: /home/node/.n8n
          name: n8n-claim0
      restartPolicy: Always
      volumes:
      - name: n8n-claim0
        persistentVolumeClaim:
          claimName: dev-n8n-claim0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.35.0 (HEAD)
  labels:
    app: postgres
  name: dev-postgres
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.35.0 (HEAD)
      labels:
        app: postgres
    spec:
      containers:
      - args:
        - postgres
        - -c
        - max_connections=1000
        - -c
        - listen_addresses=*
        envFrom:
        - configMapRef:
            name: dev-postgres-config
        - secretRef:
            name: dev-postgres-secret
        image: postgres:15
        name: postgres
        ports:
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-claim0
      restartPolicy: Always
      volumes:
      - name: postgres-claim0
        persistentVolumeClaim:
          claimName: dev-postgres-claim0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.35.0 (HEAD)
  labels:
    app: redis
  name: dev-redis
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.35.0 (HEAD)
      labels:
        app: redis
    spec:
      containers:
      - args:
        - redis-server
        - --port
        - "6379"
        - --appendonly
        - "yes"
        image: redis:latest
        name: redis
        ports:
        - containerPort: 6379
          protocol: TCP
        volumeMounts:
        - mountPath: /data
          name: redis-claim0
      restartPolicy: Always
      volumes:
      - name: redis-claim0
        persistentVolumeClaim:
          claimName: dev-redis-claim0
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: dev-default-backend-ingress
  namespace: dev
spec:
  rules:
  - host: '*.local'
    http:
      paths:
      - backend:
          service:
            name: dev-default-backend
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: dev-evolution-ingress
  namespace: dev
spec:
  rules:
  - host: evolution.local
    http:
      paths:
      - backend:
          service:
            name: dev-evolution
            port:
              number: 8080
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: dev-n8n-ingress
  namespace: dev
spec:
  rules:
  - host: n8n.local
    http:
      paths:
      - backend:
          service:
            name: dev-n8n
            port:
              number: 5678
        path: /
        pathType: Prefix
